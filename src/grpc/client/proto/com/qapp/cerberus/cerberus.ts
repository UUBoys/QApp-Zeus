/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: proto/com/qapp/cerberus/cerberus.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.qapp.cerberus {
    export class RegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            username?: string;
            password?: string;
        }): RegisterRequest {
            const message = new RegisterRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                username?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterRequest {
            return RegisterRequest.deserialize(bytes);
        }
    }
    export class RegisterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): RegisterResponse {
            const message = new RegisterResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterResponse {
            return RegisterResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class GoogleLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            idToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("idToken" in data && data.idToken != undefined) {
                    this.idToken = data.idToken;
                }
            }
        }
        get idToken() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set idToken(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            idToken?: string;
        }): GoogleLoginRequest {
            const message = new GoogleLoginRequest({});
            if (data.idToken != null) {
                message.idToken = data.idToken;
            }
            return message;
        }
        toObject() {
            const data: {
                idToken?: string;
            } = {};
            if (this.idToken != null) {
                data.idToken = this.idToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.idToken.length)
                writer.writeString(1, this.idToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoogleLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoogleLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.idToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GoogleLoginRequest {
            return GoogleLoginRequest.deserialize(bytes);
        }
    }
    export class GetUserDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): GetUserDataRequest {
            const message = new GetUserDataRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserDataRequest {
            return GetUserDataRequest.deserialize(bytes);
        }
    }
    export class GetUserDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            email?: string;
            userImage?: string;
            firstName?: string;
            lastName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userImage" in data && data.userImage != undefined) {
                    this.userImage = data.userImage;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userImage() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set userImage(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            username?: string;
            email?: string;
            userImage?: string;
            firstName?: string;
            lastName?: string;
        }): GetUserDataResponse {
            const message = new GetUserDataResponse({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userImage != null) {
                message.userImage = data.userImage;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                email?: string;
                userImage?: string;
                firstName?: string;
                lastName?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userImage != null) {
                data.userImage = this.userImage;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.userImage.length)
                writer.writeString(3, this.userImage);
            if (this.firstName.length)
                writer.writeString(4, this.firstName);
            if (this.lastName.length)
                writer.writeString(5, this.lastName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.userImage = reader.readString();
                        break;
                    case 4:
                        message.firstName = reader.readString();
                        break;
                    case 5:
                        message.lastName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserDataResponse {
            return GetUserDataResponse.deserialize(bytes);
        }
    }
    export class UpdateUserDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({
            userId?: string;
        } & (({
            username?: string;
        }) | ({
            email?: string;
        }) | ({
            password?: string;
        }) | ({
            userImage?: string;
        }) | ({
            firstName?: string;
        }) | ({
            lastName?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("userImage" in data && data.userImage != undefined) {
                    this.userImage = data.userImage;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_username() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_email() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_password() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get userImage() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set userImage(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_userImage() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get has_firstName() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[5], value);
        }
        get has_lastName() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _username() {
            const cases: {
                [index: number]: "none" | "username";
            } = {
                0: "none",
                2: "username"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _email() {
            const cases: {
                [index: number]: "none" | "email";
            } = {
                0: "none",
                3: "email"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _password() {
            const cases: {
                [index: number]: "none" | "password";
            } = {
                0: "none",
                4: "password"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _userImage() {
            const cases: {
                [index: number]: "none" | "userImage";
            } = {
                0: "none",
                5: "userImage"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _firstName() {
            const cases: {
                [index: number]: "none" | "firstName";
            } = {
                0: "none",
                6: "firstName"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _lastName() {
            const cases: {
                [index: number]: "none" | "lastName";
            } = {
                0: "none",
                7: "lastName"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            userId?: string;
            username?: string;
            email?: string;
            password?: string;
            userImage?: string;
            firstName?: string;
            lastName?: string;
        }): UpdateUserDataRequest {
            const message = new UpdateUserDataRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.userImage != null) {
                message.userImage = data.userImage;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                username?: string;
                email?: string;
                password?: string;
                userImage?: string;
                firstName?: string;
                lastName?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.userImage != null) {
                data.userImage = this.userImage;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.has_username)
                writer.writeString(2, this.username);
            if (this.has_email)
                writer.writeString(3, this.email);
            if (this.has_password)
                writer.writeString(4, this.password);
            if (this.has_userImage)
                writer.writeString(5, this.userImage);
            if (this.has_firstName)
                writer.writeString(6, this.firstName);
            if (this.has_lastName)
                writer.writeString(7, this.lastName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    case 5:
                        message.userImage = reader.readString();
                        break;
                    case 6:
                        message.firstName = reader.readString();
                        break;
                    case 7:
                        message.lastName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserDataRequest {
            return UpdateUserDataRequest.deserialize(bytes);
        }
    }
    export class UpdateUserDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            username?: string;
            email?: string;
            userImage?: string;
            firstName?: string;
            lastName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("userImage" in data && data.userImage != undefined) {
                    this.userImage = data.userImage;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userImage() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set userImage(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            userId?: string;
            username?: string;
            email?: string;
            userImage?: string;
            firstName?: string;
            lastName?: string;
        }): UpdateUserDataResponse {
            const message = new UpdateUserDataResponse({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.userImage != null) {
                message.userImage = data.userImage;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                username?: string;
                email?: string;
                userImage?: string;
                firstName?: string;
                lastName?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.userImage != null) {
                data.userImage = this.userImage;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.userImage.length)
                writer.writeString(4, this.userImage);
            if (this.firstName.length)
                writer.writeString(5, this.firstName);
            if (this.lastName.length)
                writer.writeString(6, this.lastName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.userImage = reader.readString();
                        break;
                    case 5:
                        message.firstName = reader.readString();
                        break;
                    case 6:
                        message.lastName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserDataResponse {
            return UpdateUserDataResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            Register: {
                path: "/com.qapp.cerberus.AuthService/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterResponse.deserialize(new Uint8Array(bytes))
            },
            Login: {
                path: "/com.qapp.cerberus.AuthService/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            GoogleOAuthLogin: {
                path: "/com.qapp.cerberus.AuthService/GoogleOAuthLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GoogleLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GoogleLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserData: {
                path: "/com.qapp.cerberus.AuthService/GetUserData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserDataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserDataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserDataResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUserData: {
                path: "/com.qapp.cerberus.AuthService/UpdateUserData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserDataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserDataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserDataResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Register(call: grpc_1.ServerUnaryCall<RegisterRequest, RegisterResponse>, callback: grpc_1.sendUnaryData<RegisterResponse>): void;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract GoogleOAuthLogin(call: grpc_1.ServerUnaryCall<GoogleLoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract GetUserData(call: grpc_1.ServerUnaryCall<GetUserDataRequest, GetUserDataResponse>, callback: grpc_1.sendUnaryData<GetUserDataResponse>): void;
        abstract UpdateUserData(call: grpc_1.ServerUnaryCall<UpdateUserDataRequest, UpdateUserDataResponse>, callback: grpc_1.sendUnaryData<UpdateUserDataResponse>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Register: GrpcUnaryServiceInterface<RegisterRequest, RegisterResponse> = (message: RegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, callback?: grpc_1.requestCallback<RegisterResponse>): grpc_1.ClientUnaryCall => {
            return super.Register(message, metadata, options, callback);
        };
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        GoogleOAuthLogin: GrpcUnaryServiceInterface<GoogleLoginRequest, LoginResponse> = (message: GoogleLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.GoogleOAuthLogin(message, metadata, options, callback);
        };
        GetUserData: GrpcUnaryServiceInterface<GetUserDataRequest, GetUserDataResponse> = (message: GetUserDataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserDataResponse>, callback?: grpc_1.requestCallback<GetUserDataResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUserData(message, metadata, options, callback);
        };
        UpdateUserData: GrpcUnaryServiceInterface<UpdateUserDataRequest, UpdateUserDataResponse> = (message: UpdateUserDataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserDataResponse>, callback?: grpc_1.requestCallback<UpdateUserDataResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserData(message, metadata, options, callback);
        };
    }
}
