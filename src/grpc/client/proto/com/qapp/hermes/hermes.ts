/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: proto/com/qapp/hermes/hermes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.qapp.hermes {
    export class GetEventAvailableTicketsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tickets?: EventAvailableTickets[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tickets" in data && data.tickets != undefined) {
                    this.tickets = data.tickets;
                }
            }
        }
        get tickets() {
            return pb_1.Message.getRepeatedWrapperField(this, EventAvailableTickets, 1) as EventAvailableTickets[];
        }
        set tickets(value: EventAvailableTickets[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tickets?: ReturnType<typeof EventAvailableTickets.prototype.toObject>[];
        }): GetEventAvailableTicketsResponse {
            const message = new GetEventAvailableTicketsResponse({});
            if (data.tickets != null) {
                message.tickets = data.tickets.map(item => EventAvailableTickets.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tickets?: ReturnType<typeof EventAvailableTickets.prototype.toObject>[];
            } = {};
            if (this.tickets != null) {
                data.tickets = this.tickets.map((item: EventAvailableTickets) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tickets.length)
                writer.writeRepeatedMessage(1, this.tickets, (item: EventAvailableTickets) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventAvailableTicketsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventAvailableTicketsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tickets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EventAvailableTickets.deserialize(reader), EventAvailableTickets));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventAvailableTicketsResponse {
            return GetEventAvailableTicketsResponse.deserialize(bytes);
        }
    }
    export class GetEventAvailableTicketsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set event_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            event_id?: number;
        }): GetEventAvailableTicketsRequest {
            const message = new GetEventAvailableTicketsRequest({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: number;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_id != 0)
                writer.writeInt32(2, this.event_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventAvailableTicketsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventAvailableTicketsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.event_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventAvailableTicketsRequest {
            return GetEventAvailableTicketsRequest.deserialize(bytes);
        }
    }
    export class EventAvailableTickets extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            event_id?: number;
            ticket_name?: string;
            price?: number;
            quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("ticket_name" in data && data.ticket_name != undefined) {
                    this.ticket_name = data.ticket_name;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set event_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ticket_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ticket_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            event_id?: number;
            ticket_name?: string;
            price?: number;
            quantity?: number;
        }): EventAvailableTickets {
            const message = new EventAvailableTickets({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.ticket_name != null) {
                message.ticket_name = data.ticket_name;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                event_id?: number;
                ticket_name?: string;
                price?: number;
                quantity?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.ticket_name != null) {
                data.ticket_name = this.ticket_name;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.event_id != 0)
                writer.writeInt32(2, this.event_id);
            if (this.ticket_name.length)
                writer.writeString(3, this.ticket_name);
            if (this.price != 0)
                writer.writeFloat(4, this.price);
            if (this.quantity != 0)
                writer.writeInt32(5, this.quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventAvailableTickets {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventAvailableTickets();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.event_id = reader.readInt32();
                        break;
                    case 3:
                        message.ticket_name = reader.readString();
                        break;
                    case 4:
                        message.price = reader.readFloat();
                        break;
                    case 5:
                        message.quantity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventAvailableTickets {
            return EventAvailableTickets.deserialize(bytes);
        }
    }
    export class TopupCreditsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            amount?: number;
        }): TopupCreditsRequest {
            const message = new TopupCreditsRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                amount?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.amount != 0)
                writer.writeInt32(2, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopupCreditsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TopupCreditsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.amount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TopupCreditsRequest {
            return TopupCreditsRequest.deserialize(bytes);
        }
    }
    export class CreditsOperationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            old_balance?: number;
            new_balance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("old_balance" in data && data.old_balance != undefined) {
                    this.old_balance = data.old_balance;
                }
                if ("new_balance" in data && data.new_balance != undefined) {
                    this.new_balance = data.new_balance;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get old_balance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set old_balance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_balance() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set new_balance(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            user_id?: number;
            old_balance?: number;
            new_balance?: number;
        }): CreditsOperationResponse {
            const message = new CreditsOperationResponse({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.old_balance != null) {
                message.old_balance = data.old_balance;
            }
            if (data.new_balance != null) {
                message.new_balance = data.new_balance;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                old_balance?: number;
                new_balance?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.old_balance != null) {
                data.old_balance = this.old_balance;
            }
            if (this.new_balance != null) {
                data.new_balance = this.new_balance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.old_balance != 0)
                writer.writeInt32(2, this.old_balance);
            if (this.new_balance != 0)
                writer.writeInt32(3, this.new_balance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreditsOperationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreditsOperationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.old_balance = reader.readInt32();
                        break;
                    case 3:
                        message.new_balance = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreditsOperationResponse {
            return CreditsOperationResponse.deserialize(bytes);
        }
    }
    export class PurchaseTicketResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creditOperation?: CreditsOperationResponse;
            Ticket?: EventAvailableTickets;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creditOperation" in data && data.creditOperation != undefined) {
                    this.creditOperation = data.creditOperation;
                }
                if ("Ticket" in data && data.Ticket != undefined) {
                    this.Ticket = data.Ticket;
                }
            }
        }
        get creditOperation() {
            return pb_1.Message.getWrapperField(this, CreditsOperationResponse, 1) as CreditsOperationResponse;
        }
        set creditOperation(value: CreditsOperationResponse) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_creditOperation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Ticket() {
            return pb_1.Message.getWrapperField(this, EventAvailableTickets, 2) as EventAvailableTickets;
        }
        set Ticket(value: EventAvailableTickets) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_Ticket() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            creditOperation?: ReturnType<typeof CreditsOperationResponse.prototype.toObject>;
            Ticket?: ReturnType<typeof EventAvailableTickets.prototype.toObject>;
        }): PurchaseTicketResponse {
            const message = new PurchaseTicketResponse({});
            if (data.creditOperation != null) {
                message.creditOperation = CreditsOperationResponse.fromObject(data.creditOperation);
            }
            if (data.Ticket != null) {
                message.Ticket = EventAvailableTickets.fromObject(data.Ticket);
            }
            return message;
        }
        toObject() {
            const data: {
                creditOperation?: ReturnType<typeof CreditsOperationResponse.prototype.toObject>;
                Ticket?: ReturnType<typeof EventAvailableTickets.prototype.toObject>;
            } = {};
            if (this.creditOperation != null) {
                data.creditOperation = this.creditOperation.toObject();
            }
            if (this.Ticket != null) {
                data.Ticket = this.Ticket.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_creditOperation)
                writer.writeMessage(1, this.creditOperation, () => this.creditOperation.serialize(writer));
            if (this.has_Ticket)
                writer.writeMessage(2, this.Ticket, () => this.Ticket.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PurchaseTicketResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PurchaseTicketResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.creditOperation, () => message.creditOperation = CreditsOperationResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.Ticket, () => message.Ticket = EventAvailableTickets.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PurchaseTicketResponse {
            return PurchaseTicketResponse.deserialize(bytes);
        }
    }
    export class GetCreditsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): GetCreditsRequest {
            const message = new GetCreditsRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCreditsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCreditsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCreditsRequest {
            return GetCreditsRequest.deserialize(bytes);
        }
    }
    export class CreditStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            balance?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            balance?: number;
        }): CreditStatusResponse {
            const message = new CreditStatusResponse({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.balance != null) {
                message.balance = data.balance;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                balance?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.balance != null) {
                data.balance = this.balance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.balance != 0)
                writer.writeInt32(2, this.balance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreditStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreditStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.balance = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreditStatusResponse {
            return CreditStatusResponse.deserialize(bytes);
        }
    }
    export class PurchaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_id?: number;
            user_id?: number;
            ticket_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("ticket_id" in data && data.ticket_id != undefined) {
                    this.ticket_id = data.ticket_id;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set event_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ticket_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ticket_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            event_id?: number;
            user_id?: number;
            ticket_id?: number;
        }): PurchaseRequest {
            const message = new PurchaseRequest({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.ticket_id != null) {
                message.ticket_id = data.ticket_id;
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: number;
                user_id?: number;
                ticket_id?: number;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.ticket_id != null) {
                data.ticket_id = this.ticket_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_id != 0)
                writer.writeInt32(1, this.event_id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.ticket_id != 0)
                writer.writeInt32(3, this.ticket_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PurchaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PurchaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readInt32();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.ticket_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PurchaseRequest {
            return PurchaseRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCreditServiceService {
        static definition = {
            TopupCredits: {
                path: "/com.qapp.hermes.CreditService/TopupCredits",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TopupCreditsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TopupCreditsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreditsOperationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreditsOperationResponse.deserialize(new Uint8Array(bytes))
            },
            GetCredits: {
                path: "/com.qapp.hermes.CreditService/GetCredits",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCreditsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCreditsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreditStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreditStatusResponse.deserialize(new Uint8Array(bytes))
            },
            Purchase: {
                path: "/com.qapp.hermes.CreditService/Purchase",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PurchaseRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PurchaseRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PurchaseTicketResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PurchaseTicketResponse.deserialize(new Uint8Array(bytes))
            },
            GetEventAvailableTickets: {
                path: "/com.qapp.hermes.CreditService/GetEventAvailableTickets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetEventAvailableTicketsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetEventAvailableTicketsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetEventAvailableTicketsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetEventAvailableTicketsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract TopupCredits(call: grpc_1.ServerUnaryCall<TopupCreditsRequest, CreditsOperationResponse>, callback: grpc_1.sendUnaryData<CreditsOperationResponse>): void;
        abstract GetCredits(call: grpc_1.ServerUnaryCall<GetCreditsRequest, CreditStatusResponse>, callback: grpc_1.sendUnaryData<CreditStatusResponse>): void;
        abstract Purchase(call: grpc_1.ServerUnaryCall<PurchaseRequest, PurchaseTicketResponse>, callback: grpc_1.sendUnaryData<PurchaseTicketResponse>): void;
        abstract GetEventAvailableTickets(call: grpc_1.ServerUnaryCall<GetEventAvailableTicketsRequest, GetEventAvailableTicketsResponse>, callback: grpc_1.sendUnaryData<GetEventAvailableTicketsResponse>): void;
    }
    export class CreditServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCreditServiceService.definition, "CreditService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        TopupCredits: GrpcUnaryServiceInterface<TopupCreditsRequest, CreditsOperationResponse> = (message: TopupCreditsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreditsOperationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreditsOperationResponse>, callback?: grpc_1.requestCallback<CreditsOperationResponse>): grpc_1.ClientUnaryCall => {
            return super.TopupCredits(message, metadata, options, callback);
        };
        GetCredits: GrpcUnaryServiceInterface<GetCreditsRequest, CreditStatusResponse> = (message: GetCreditsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreditStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreditStatusResponse>, callback?: grpc_1.requestCallback<CreditStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCredits(message, metadata, options, callback);
        };
        Purchase: GrpcUnaryServiceInterface<PurchaseRequest, PurchaseTicketResponse> = (message: PurchaseRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PurchaseTicketResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PurchaseTicketResponse>, callback?: grpc_1.requestCallback<PurchaseTicketResponse>): grpc_1.ClientUnaryCall => {
            return super.Purchase(message, metadata, options, callback);
        };
        GetEventAvailableTickets: GrpcUnaryServiceInterface<GetEventAvailableTicketsRequest, GetEventAvailableTicketsResponse> = (message: GetEventAvailableTicketsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEventAvailableTicketsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEventAvailableTicketsResponse>, callback?: grpc_1.requestCallback<GetEventAvailableTicketsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetEventAvailableTickets(message, metadata, options, callback);
        };
    }
}
